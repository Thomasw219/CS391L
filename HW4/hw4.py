import numpy as np

from scipy.optimize import minimize

from gp import *
from data import *

def callback(xk):
    print(xk)


X_SCALE = 10
Y_SCALE = 10
T_I = 0
T_F = 17.5

STEP = 0.05
N_SAMPLES = 200
INIT_SIG_F = 2.33219503
INIT_SIG_L = -4.55283543
INIT_SIG_N = -1.59004312
INTERVAL = 2
time_centers = np.arange(T_I, T_F, STEP)
"""
N_SAMPLES = 500
#INIT_SIG_F = 0
#INIT_SIG_L = 0
#INIT_SIG_N = 0
INIT_SIG_F = 2.33219503
INIT_SIG_L = -4.55283543
INIT_SIG_N = -1.59004312
INTERVAL = 17.5
time_centers = np.array([8.75])
"""

def filter_array(array, lower, upper):
    l = 0
    u = 0
    for i, val in enumerate(array):
        if val >= lower:
            l = i
            break
    for i, val in enumerate(array[l:]):
        if upper < val:
            break
        u = i + l
    return array[l:u + 1]


init_sig = np.array([INIT_SIG_F, INIT_SIG_L, INIT_SIG_N])

KEY = 'AG'
MARKER = 15
DIM = 'x'
DIR = './figures/' + KEY + '_' + str(INTERVAL)

data = get_data()
run = get_all_data(data, KEY)
marker_data = get_marker_data(run, MARKER, DIM)

sig_f = []
sig_l = []
sig_n = []

local_means = {}
for t in time_centers:
    local_means[t * X_SCALE] = []

for t in time_centers:
    filtered_marker_data = restrict_times(marker_data, t - INTERVAL / 2, t + INTERVAL / 2)
    X, Y = to_matrices(filtered_marker_data)
    N = X.shape[0]
    print((t - INTERVAL / 2, t + INTERVAL / 2))
    print(N)
#    indices = np.random.choice(N, size=min(N, N_SAMPLES), replace=False)
    indices = np.random.choice(N, size=N, replace=False)
    X = X[indices] * X_SCALE
    Y = Y[indices] * Y_SCALE
#    N = min(N, N_SAMPLES)

    m_y = np.ones((N, 1)) * np.mean(Y)

    res = minimize(neglogprob, init_sig, args=(X, Y - m_y, N), method='BFGS', jac=neglogprob_grad, options={'disp': True})
    print(res.x)

    sig_f.append(res.x[0])
    sig_l.append(res.x[1])
    sig_n.append(res.x[2])
    init_sig = np.ravel(res.x)

    sample_X = np.arange((t - INTERVAL / 2) * X_SCALE, (t + INTERVAL / 2) * X_SCALE, X_SCALE * STEP)
    sample_X = np.reshape(sample_X, (sample_X.shape[0], 1))
    m_f = np.ones((sample_X.shape[0], 1)) * np.mean(Y)

    subset = np.array(filter_array(time_centers, t - INTERVAL / 2, t + INTERVAL / 2))
    subset = np.reshape(subset, (subset.shape[0], 1)) * X_SCALE
    m_f = np.ones((subset.shape[0], 1)) * np.mean(Y)
    sample_mean, sample_cov_mat = define_GP(X, Y, m_y, m_f, subset, sig_f[-1], sig_l[-1], sig_n[-1])
#    sample_mean, sample_cov_mat = define_GP(X, Y, m_y, m_f, sample_X, init_sig[0], init_sig[1], init_sig[2])
    sample_mean = np.ravel(sample_mean)
    sample_var = np.array([sample_cov_mat[i][i] for i in range(sample_cov_mat.shape[0])])

    """
    for i in range(sample_mean.shape[0]):
        local_means[np.asscalar(subset[i])].append(sample_mean[i])

    """
    plt.figure(0)
    plt.plot(subset, sample_mean, color='r')
    plt.plot(subset, sample_mean + 2 * sample_var, color='b')
    plt.plot(subset, sample_mean - 2 * sample_var, color='b')
    plt.scatter(np.ravel(X), np.ravel(Y), c='g')
    plt.savefig(DIR + '/' + KEY + '_' + str(MARKER) + '_' + DIM + '_center_' + str(t) + '_interval_' + str(INTERVAL) + '.png')
 #   plt.savefig("./figures/AG_sample_at_every_10th_full.png")
    plt.close()

"""
#REMOVE ONCE DONE WITH BIG THING
#np.save("./means", sample_mean)
print("exited at exit statement")
exit()
"""

np.save("./sig_f", np.array(sig_f))
np.save("./sig_l", np.array(sig_l))
np.save("./sig_n", np.array(sig_n))

bounds = [T_I, T_F]
init_sig_f = [INIT_SIG_F, INIT_SIG_F]
init_sig_l = [INIT_SIG_L, INIT_SIG_L]
init_sig_n = [INIT_SIG_N, INIT_SIG_N]

means = [-2.774774402965811, -2.8131673680430405, -2.8414920608623873, -2.85824032187502, -2.862013101191082, -2.851550281065261, -2.8257581780358594, -2.7837339153688165, -2.72478591990426, -2.648449888573257, -2.5544996869167442, -2.442952782004142, -2.314069971249946, -2.168349341887365, -2.0065145776311364, -1.8294979129695408, -1.6384182150014888, -1.4345548408123716, -1.219318068466575, -0.9942170254041853, -0.7608261338331874, -0.5207511537870992, -0.27559592757734297, -0.026930912135088914, 0.22373547233744162, 0.47498174676295957, 0.7254937349489539, 0.9740797548245101, 1.2196802060608207, 1.4613713359587197, 1.698363192247505, 1.9299920014884084, 2.155707435551657, 2.375055437263591, 2.587657460583731, 2.793187132817373, 2.9913454593406903, 3.1818357595085645, 3.3643395424778, 3.538494501544386, 3.7038757257589805, 3.8599811005948372, 4.006221699603598, 4.141917762984903, 4.26630062494414, 4.378520698764548, 4.477661367703718, 4.5627583714453195, 4.632824033544956, 4.686875455159186, 4.7239656143355315, 4.743216166563144, 4.7438506474834075, 4.725226737594907, 4.686866263273991, 4.628481678768811, 4.5499978970759845, 4.4515685092271, 4.33358564435224, 4.196682968020605, 4.0417315838670955, 3.869828881545494, 3.6822806514004003, 3.480577050761742, 3.2663632471748714, 3.041405770273483, 2.807555767113579, 2.566710469353707, 2.320774239322946, 2.071620563946674, 1.8210563105237187, 1.5707894490951833, 1.3224012877626845, 1.0773240664017734, 0.836824520174893, 0.6019937668121886, 0.3737436024374783, 0.15280902098284388, -0.06024348585335737, -0.26500252717943873, -0.46119419241351123, -0.6486612565810836, -0.8273403709534235, -0.9972384607025122, -1.1584095586192151, -1.3109332565124336, -1.4548958558137441, -1.5903751511055524, -1.7174295910638802, -1.836092339251972, -1.9463705120254844, -2.0482496131371764, -2.1417029258632985, -2.2267053747223198, -2.3032511409954384, -2.3713741191936464, -2.431170144024022, -2.4828198060975146, -2.5266106148151195, -2.562957261196504, -2.5924187826713117, -2.6157115342324513, -2.6337170219953325, -2.647483850176741, -2.658223263023352, -2.667298020100041, -2.6762046161698207, -2.686549134694689, -2.7000172954903534, -2.718339511097366, -2.743251992793513, -2.7764551363082792, -2.8195705614989324, -2.874098273270537, -2.941375448824646, -3.022538336813429, -3.1184886775407774, -3.229865922331511, -3.35702634922307, -3.5000299477265564, -3.658635685595019, -3.8323054850268266, -4.020216934763882, -4.221284459371354, -4.43418836857059, -4.657410929018203, -4.889278348362091, -5.128007346080517, -5.371754815407444, -5.618668961467487, -5.8669402372584445, -6.114850393246721, -6.360818008750945, -6.603438981953727, -6.841520616613483, -7.074108152103539, -7.300502831861079, -7.520270885574131, -7.733243102884185, -7.939504991027274, -8.139377825158613, -8.333391207639437, -8.52224804114786, -8.706783080698118, -8.887916452769662, -9.066603708643242, -9.243784107406729, -9.420328898138306, -9.596991387058726, -9.774360534020824, -9.95281972360387, -10.132512202959422, -10.313314474928227, -10.494818687695199, -10.6763247781471, -10.85684281420554, -11.035105651055689, -11.209591678013869, -11.3785570968756, -11.540076850655863, -11.692093022967963, -11.83246926423698, -11.959049579338034, -12.069719640847147, -12.162468678845213, -12.235449947275917, -12.287037780491573, -12.315879333426725, -12.320939242652528, -12.301535650652612, -12.257366296055523, -12.188523680690475, -12.095498671179705, -11.979172267163348, -11.84079565813734, -11.68195908350584, -11.50455039215626, -11.310704555457175, -11.102745708369934, -10.883123565094351, -10.65434626799155, -10.418911873139429, -10.17924074561887, -9.937611129321528, -9.696100067760318, -9.456531686429997, -9.220434607280296, -8.989009960235583, -8.763111094084312, -8.54323568291774, -8.3295304874125, -8.121808579533662, -7.919578389829139, -7.722083506040272, -7.528351755774862, -7.33725176066581, -7.147554867487713, -6.958000155326065, -6.767360095644452, -6.57450440941583, -6.378459725115278, -6.178462791587, -5.974005235969528, -5.764868170785969, -5.551145334081349, -5.333253878478899, -5.111932392026584, -4.888226218421879, -4.663460626963956, -4.439202844828902, -4.217214387551737, -3.9993954907580793, -3.787723742944025, -3.5841892331611005, -3.390728650570425, -3.209160799938111, -3.0411259275981046, -2.8880310891394183, -2.751003540381395, -2.630853807388638, -2.5280497035018388, -2.4427021275884977, -2.3745630163855584, -2.323035353922775, -2.2871946820923874, -2.2658211271113626, -2.257440574261066, -2.2603733028306765, -2.2727881469126614, -2.2927600842897764, -2.3183290803188976, -2.347558027537352, -2.3785877220667837, -2.4096869983457676, -2.4392963945179256, -2.466064029436227, -2.4888727238623503, -2.506857776823105, -2.5194151962885063, -2.5262005644197476, -2.5271190756574606, -2.522307606361835, -2.5121099453663525, -2.497046526032345, -2.477780145658654, -2.4550792340945713, -2.42978023999276, -2.402750643479298, -2.37485398395828, -2.3469181197675075, -2.3197077227804854, -2.2939017675807865, -2.2700765140105554, -2.2486942163481918, -2.230097534277762, -2.214509381279048, -2.2020377347172024, -2.192684756476329, -2.186359438981924, -2.1828929022528225, -2.1820554240601004, -2.183574286157406, -2.187151561584502, -2.1924810461850366, -2.1992636454333896, -2.2072206580093297, -2.216104542567524, -2.2257069057599126, -2.2358636002356285, -2.2464569640503527, -2.2574153616678103, -2.2687102966604904, -2.280351453893533, -2.292380092211675, -2.3048612467725627, -2.317875213741137, -2.331508780784271, -2.3458466373473934, -2.3609633524744806, -2.376916248802239, -2.3937394334007416, -2.411439173483979, -2.4299907315156917, -2.4493367033517845, -2.469386837779102, -2.4900192583593013, -2.511082960581488, -2.5324014198428326, -2.5537771190606935, -2.574996788484352, -2.5958371437512584, -2.6160709103195967, -2.6354729317160897, -2.6538261739891964, -2.6709274579456754, -2.686592772510954, -2.700662045737153, -2.713003273339432, -2.7235159273408485, -2.732133588792543, -2.7388257682183914, -2.743598895216098, -2.746496474564559, -2.7475984203591093, -2.747019592353445, -2.7449075701553904, -2.741439711390624, -2.7368195497801935, -2.7312725983111226, -2.72504163156382, -2.718381529654991, -2.7115537742208073, -2.704820694132082, -2.698439565077094, -2.6926566724469523, -2.687701450879072, -2.6837808160896466, -2.6810738049729714, -2.679726638213724, -2.6798483156813093, -2.6815068485419853, -2.6847262234085623, -2.68948418289399, -2.6957108938543657, -2.7032885595485445, -2.7120520151526595, -2.7217903277612487, -2.7322494026475965, -2.7431355773127506, -2.7541201642238375, -2.7648448824688114, -2.7749280982499216, -2.783971774616393, -2.791569012551189, -2.7973120488890215, -2.8008005619973697, -2.801650124140908, -2.7995006303743297, -2.7940245280300298, -2.784934668779957, -2.771991607068022, -2.755010174669072, -2.7338651713268285, -2.7084960258553434, -2.678910300617699, -2.6451859346509874, -2.6074721465553083, -2.565988946953468, -2.5210252413310212, -2.472935536509608]
averaged_means = [np.mean(local_means[t * X_SCALE]) for t in time_centers]
np.save("./averaged_means", np.array(averaged_means))

plt.figure(0)
plt.plot(time_centers, means, c='r', label='Global Params Mean')
plt.plot(time_centers, averaged_means, c='b', label='Local Params Mean')
plt.legend()
plt.savefig(DIR + '/' + KEY + '_' + str(MARKER) + '_' + DIM + '_mean_comparison.png')
"""
plt.plot(time_centers, means, c='k', label='trajectory')
plt.plot(time_centers, sig_f, c='r', label='sig_f')
plt.plot(time_centers, sig_l, c='g', label='sig_l')
plt.plot(time_centers, sig_n, c='b', label='sig_n')
plt.plot(bounds, init_sig_f, c='#ffcccb', label='initial sig_f')
plt.plot(bounds, init_sig_l, c='#90ee90', label='initial sig_l')
plt.plot(bounds, init_sig_n, c='#add8e6', label='initial sig_n')
plt.legend()
plt.savefig(DIR + '/' + KEY + '_' + str(MARKER) + '_' + DIM + '_hyperparams.png')
"""
